buildscript {
  repositories {
    mavenCentral()
    jcenter()
    maven { url 'http://repo.grails.org/grails/repo' }
  }
  dependencies {
    classpath "org.grails:grails-gradle-plugin:2.0.0"
    classpath "org.fortasoft:gradle-maven-plugin:1.0.5"
    "org.codehaus.groovy:groovy-all:2.1.9 " 
    "org.grails:grails-bootstrap:2.3.5"
  }
}

version "0.5"
group "example"

apply plugin: "grails"
apply plugin: "maven"
apply plugin: "codenarc"

repositories {
  grails.central() //creates a maven repo for the Grails Central repository (Core libraries and plugins)

  mavenLocal()
  mavenCentral()

  maven { url 'http://192.168.0.37:8080/artifactory/HMS' }
}

grails {
  grailsVersion = '2.3.5'
  groovyVersion = '2.1.9'
  springLoadedVersion '1.1.3'
}

configurations {
    gmetrics
}

dependencies { 
    ['dependencies', 'core', 'spring', 'web', 'plugin-datasource', 'plugin-domain-class', 'plugin-controllers', 'plugin-services'].each { plugin -> 
        compile "org.grails:grails-$plugin:$grailsVersion" 
    } 
    compile 'org.grails.plugins:tomcat:7.0.50' 
    compile 'org.grails.plugins:hibernate:3.6.10.7' 
    compile 'com.h2database:h2:1.3.173' 
    bootstrap "org.codehaus.groovy:groovy-all:$grails.groovyVersion" 

    runtime "mysql:mysql-connector-java:5.1.29"

    compile 'org.apache.ws.security:wss4j:1.6.12'
    compile 'org.apache.cxf:cxf-rt-ws-security:2.7.7'
    compile "org.optaplanner:optaplanner-core:6.0.1.Final"
    compile "joda-time:joda-time:2.3"

    runtime "org.grails.plugins:roomplanner-api:0.5-SNAPSHOT"
    runtime "org.grails.plugins:roombix-ui:0.1-SNAPSHOT"

    compile "org.grails.plugins:cxf:1.1.1"

    test "org.grails:grails-test:$grails.grailsVersion"    
    test "org.spockframework:spock-grails-support:0.7-groovy-2.0"
    test "org.grails.plugins:spock:0.7"
    test "org.grails.plugins:code-coverage:1.2.7"
    
    gmetrics "org.gmetrics:GMetrics:0.5"
} 

import org.grails.gradle.plugin.tasks.GrailsTask

task testUnit(type: GrailsTask) {
  command "test-app"
  args "--non-interactive -Dgrails.env=jenkins unit:spock -coverage -xml"
}

task testIntegration(type: GrailsTask) {
  command "test-app"
  args "--non-interactive -Dgrails.env=jenkins integration:spock"
}

task war(type: GrailsTask) { 
  command "war"  
}

task codenarc(type: CodeNarc) {
  source = fileTree(dir: "grails-app", include: "**/*.groovy*")
  configFile = file("codenarc.groovy")
}

tasks.withType(CodeNarc) {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

// tasks.'grails-war'.mustRunAfter stdTest
// assemble.dependsOn stdTest

// tasks.withType(org.grails.gradle.plugin.tasks.GrailsTask) { Task t ->
//     t.jvmOptions {
//         jvmArgs "-Xmx384mx", "-XX:MaxPermSize=256m"
//     }
// }

def gmetricsResultsDir = "${project.reporting.baseDir.path}/metrics"
def includes = ['grails-app/**/*.groovy', 'src/**/*.groovy']

task initReporting << {
  ant.mkdir dir: gmetricsResultsDir
}

task metrics << {
  // Using AntBuilder
  ant.taskdef(name: 'gmetrics', classname: 'org.gmetrics.ant.GMetricsTask', classpath: configurations.gmetrics.asPath)
  ant.gmetrics() {
  //ant.gmetrics(metricSetFile: 'file:gmetrics_config.groovy') {
      report(type: 'org.gmetrics.report.BasicHtmlReportWriter') {
      //report(type: 'org.gmetrics.report.XmlReportWriter') {        
            option(name: 'outputFile', value: "$gmetricsResultsDir/gmetrics_report.html")
            option(name: 'title', value: 'RoomPlanner Application Code Metrics')
      }
      
      fileset(dir: '.', includes: includes.join(','))
  }
}

metrics.dependsOn {
    [testUnit, initReporting]
}
// private List gmetricsConfigureIncludes(gmetricsConfig) {
//     List includes = []

//     if (getConfigBoolean(gmetricsConfig, 'processSrcGroovy')) {
//         includes << 'src/main/**/*.groovy'
//     }

//     if (getConfigBoolean(gmetricsConfig, 'processModels')) {
//         includes << 'griffon-app/models/**/*.groovy'
//     }

//     if (getConfigBoolean(gmetricsConfig, 'processControllers')) {
//         includes << 'griffon-app/controllers/**/*.groovy'
//     }

//     if (getConfigBoolean(gmetricsConfig, 'processViews')) {
//         includes << 'griffon-app/views/**/*.groovy'
//     }

//     if (getConfigBoolean(gmetricsConfig, 'processServices')) {
//         includes << 'griffon-app/services/**/*.groovy'
//     }

//     if (getConfigBoolean(gmetricsConfig, 'processTestUnit')) {
//         includes << 'test/unit/**/*.groovy'
//     }

//     if (getConfigBoolean(gmetricsConfig, 'processTestIntegration')) {
//         includes << 'test/integration/**/*.groovy'
//     }

//     for (includeDir in gmetricsConfig.extraIncludeDirs) {
//         includes << "$includeDir/**/*.groovy"
//     }

//     return includes
// }
