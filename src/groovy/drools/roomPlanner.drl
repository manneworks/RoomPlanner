package hms
dialect "mvel"

import java.util.Date

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import roomplanner.Room
import roomplanner.Reservation
import roomplanner.RoomCategory
import roomplanner.Schedule
import roomplanner.RoomAssignment

import org.joda.time.Interval

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################
rule "Overlapping periods"
dialect "mvel"
when
    $ra1 : RoomAssignment(room != null, $room : room, $i : reservation.bookingInterval, $id : id)
    $ra2 : RoomAssignment(room == $room, reservation.bookingInterval.overlaps($i), id != $id)
then
    scoreHolder.addHardConstraintMatch(kcontext, -1)
end

rule "Lower room size"
when
    $roomAssignment : RoomAssignment(room != null, reservation.adults > room.adults)
then
    scoreHolder.addHardConstraintMatch(kcontext, 
        (-3*($roomAssignment.reservation.adults - $roomAssignment.room.adults)).intValue()
    )
end

rule "Lower RoomCategory"
when
    $roomAssignment: RoomAssignment(
        reservation != null,
        room != null,
        room.roomCategory.id < reservation.roomCategory.id
      )
then
    scoreHolder.addHardConstraintMatch(kcontext,
        (-1*($roomAssignment.reservation.roomCategory.id - $roomAssignment.room.roomCategory.id)).intValue()
    )
end

// Assign every reservation to a room, unless the dataset is overconstrained
rule "Assign every reservation"
when
    $roomAssignment : RoomAssignment(
        room == null, 
        $i : reservation.bookingInterval
    )
then
    scoreHolder.addHardConstraintMatch(kcontext,
        -10
    )
end


// ############################################################################
// Soft constraints
// ############################################################################
rule "Higher RoomCategory"
when
    $roomAssignment: RoomAssignment(
        reservation != null,
        room != null,
        reservation.roomCategory.id < room.roomCategory.id
      )
then
    scoreHolder.addSoftConstraintMatch(kcontext,
        (-20*($roomAssignment.room.roomCategory.id - $roomAssignment.reservation.roomCategory.id)).intValue()
    )
end

rule "Higher room size"
when
    $roomAssignment: RoomAssignment(room != null, room.adults > reservation.adults)
then
    scoreHolder.addSoftConstraintMatch(kcontext,
        (-10*($roomAssignment.room.adults - $roomAssignment.reservation.adults)).intValue()
    )
end
