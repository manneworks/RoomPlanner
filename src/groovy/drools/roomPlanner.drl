//created on: 07.08.2012
package hms
dialect "mvel"

import java.util.Date

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import org.optaplanner.core.impl.score.constraint.IntConstraintOccurrence;
import org.optaplanner.core.impl.score.constraint.ConstraintType;

import roomplanner.Room
import roomplanner.Reservation
import roomplanner.RoomCategory
import roomplanner.Schedule
import roomplanner.RoomAssignment

import org.joda.time.Interval

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################
rule "Overlapping periods"
dialect "mvel"
when
    $ra1 : RoomAssignment(room != null, $room : room, $i : reservation.bookingInterval)
    $ra2 : RoomAssignment(room == $room, reservation.bookingInterval.overlaps($i))
    eval($ra1 != $ra2)
then
    insertLogical(new IntConstraintOccurrence("overlappingPeriod",
        ConstraintType.HARD, -1, $ra1, $ra2));
     //System.out.println("Overlap constraint " + $ra1 + " <=> " + $ra2);
end

rule "Lower room size"
when
    $roomAssignment : RoomAssignment(room != null, reservation.adults > room.adults)
then
    insertLogical(new IntConstraintOccurrence("lowerRoomSize",
        ConstraintType.HARD, (-3*($roomAssignment.reservation.adults - $roomAssignment.room.adults)).intValue(), 
        $roomAssignment));
end

rule "Lower RoomCategory"
when
    $roomAssignment: RoomAssignment(
        reservation != null,
        room != null,
        room.roomCategory.id < reservation.roomCategory.id
      )
then
    insertLogical(new IntConstraintOccurrence("lowerRoomCategory",
        ConstraintType.HARD, (-1*($roomAssignment.reservation.roomCategory.id - $roomAssignment.room.roomCategory.id)).intValue(),
        $roomAssignment));
end

// ############################################################################
// Soft constraints
// ############################################################################
rule "Higher RoomCategory"
when
    $roomAssignment: RoomAssignment(
        reservation != null,
        room != null,
        reservation.roomCategory.id < room.roomCategory.id
      )
then
    insertLogical(new IntConstraintOccurrence("higherRoomCategory",
        ConstraintType.SOFT, (-20*($roomAssignment.room.roomCategory.id - $roomAssignment.reservation.roomCategory.id)).intValue(),
        $roomAssignment)); 
end

rule "Higher room size"
when
    $roomAssignment: RoomAssignment(room != null, room.adults > reservation.adults)
then
    insertLogical(new IntConstraintOccurrence("higherRoomSize",
        ConstraintType.SOFT, (-10*($roomAssignment.room.adults - $roomAssignment.reservation.adults)).intValue(), 
        $roomAssignment));
end

// ############################################################################
// Calculate score
// ############################################################################

// Accumulate hard constraints
rule "hardConstraintsBroken"
        salience -1 // Do the other rules first (optional, for performance)
    when
        $hardTotal : Number() from accumulate(
            IntConstraintOccurrence(constraintType == ConstraintType.HARD, $weight : weight),
            sum($weight) // Vote for http://jira.jboss.com/jira/browse/JBRULES-1075
        )
    then
        scoreHolder.setHardScore($hardTotal.intValue());
end

// Accumulate soft constraints
rule "softConstraintsBroken"
        salience -1 // Do the other rules first (optional, for performance)
    when
        $softTotal : Number() from accumulate(
            IntConstraintOccurrence(constraintType == ConstraintType.SOFT, $weight : weight),
            sum($weight) // Vote for http://jira.jboss.com/jira/browse/JBRULES-1075
        )
    then
        scoreHolder.setSoftScore($softTotal.intValue());
end

